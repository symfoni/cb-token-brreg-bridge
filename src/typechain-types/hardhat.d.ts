/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Disperse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Disperse__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC1820Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Registry__factory>;
    getContractFactory(
      name: "Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: "CBSToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CBSToken__factory>;
    getContractFactory(
      name: "CBToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CBToken__factory>;
    getContractFactory(
      name: "VCRegistryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VCRegistryInterface__factory>;
    getContractFactory(
      name: "EthereumDIDRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumDIDRegistry__factory>;
    getContractFactory(
      name: "ERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1271__factory>;
    getContractFactory(
      name: "DisperseWithData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DisperseWithData__factory>;
    getContractFactory(
      name: "IERC1400",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400__factory>;
    getContractFactory(
      name: "IERC1820Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Registry__factory>;
    getContractFactory(
      name: "ERC1400",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1400__factory>;
    getContractFactory(
      name: "TokenSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenSwap__factory>;
    getContractFactory(
      name: "IERC1400TokensChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400TokensChecker__factory>;
    getContractFactory(
      name: "IERC1400TokensValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400TokensValidator__factory>;
    getContractFactory(
      name: "IERC1400TokensRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400TokensRecipient__factory>;
    getContractFactory(
      name: "IERC1400TokensSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400TokensSender__factory>;
    getContractFactory(
      name: "IERC1400",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400__factory>;
    getContractFactory(
      name: "ERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1820Implementer__factory>;
    getContractFactory(
      name: "IERC1643",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1643__factory>;
    getContractFactory(
      name: "MinterRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinterRole__factory>;
    getContractFactory(
      name: "DomainAware",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DomainAware__factory>;
    getContractFactory(
      name: "VCRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VCRegistry__factory>;

    getContractAt(
      name: "Disperse",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Disperse>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC1820Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Registry>;
    getContractAt(
      name: "Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bridge>;
    getContractAt(
      name: "CBSToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CBSToken>;
    getContractAt(
      name: "CBToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CBToken>;
    getContractAt(
      name: "VCRegistryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VCRegistryInterface>;
    getContractAt(
      name: "EthereumDIDRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumDIDRegistry>;
    getContractAt(
      name: "ERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1271>;
    getContractAt(
      name: "DisperseWithData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DisperseWithData>;
    getContractAt(
      name: "IERC1400",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400>;
    getContractAt(
      name: "IERC1820Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Registry>;
    getContractAt(
      name: "ERC1400",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1400>;
    getContractAt(
      name: "TokenSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenSwap>;
    getContractAt(
      name: "IERC1400TokensChecker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400TokensChecker>;
    getContractAt(
      name: "IERC1400TokensValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400TokensValidator>;
    getContractAt(
      name: "IERC1400TokensRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400TokensRecipient>;
    getContractAt(
      name: "IERC1400TokensSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400TokensSender>;
    getContractAt(
      name: "IERC1400",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400>;
    getContractAt(
      name: "ERC1820Implementer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1820Implementer>;
    getContractAt(
      name: "IERC1643",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1643>;
    getContractAt(
      name: "MinterRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinterRole>;
    getContractAt(
      name: "DomainAware",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DomainAware>;
    getContractAt(
      name: "VCRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VCRegistry>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
