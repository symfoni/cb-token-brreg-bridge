/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IERC1400Interface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "allowanceByPartition(bytes32,address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorizeOperator(address)": FunctionFragment;
    "authorizeOperatorByPartition(bytes32,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfByPartition(bytes32,address)": FunctionFragment;
    "getAllDocuments()": FunctionFragment;
    "getDocument(bytes32)": FunctionFragment;
    "isControllable()": FunctionFragment;
    "isIssuable()": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "isOperatorForPartition(bytes32,address,address)": FunctionFragment;
    "issue(address,uint256,bytes)": FunctionFragment;
    "issueByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "operatorRedeemByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)": FunctionFragment;
    "partitionsOf(address)": FunctionFragment;
    "redeem(uint256,bytes)": FunctionFragment;
    "redeemByPartition(bytes32,uint256,bytes)": FunctionFragment;
    "redeemFrom(address,uint256,bytes)": FunctionFragment;
    "removeDocument(bytes32)": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "revokeOperatorByPartition(bytes32,address)": FunctionFragment;
    "setDocument(bytes32,string,bytes32)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferByPartition(bytes32,address,uint256,bytes)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferFromWithData(address,address,uint256,bytes)": FunctionFragment;
    "transferWithData(address,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "allowanceByPartition"
      | "approve"
      | "authorizeOperator"
      | "authorizeOperatorByPartition"
      | "balanceOf"
      | "balanceOfByPartition"
      | "getAllDocuments"
      | "getDocument"
      | "isControllable"
      | "isIssuable"
      | "isOperator"
      | "isOperatorForPartition"
      | "issue"
      | "issueByPartition"
      | "operatorRedeemByPartition"
      | "operatorTransferByPartition"
      | "partitionsOf"
      | "redeem"
      | "redeemByPartition"
      | "redeemFrom"
      | "removeDocument"
      | "revokeOperator"
      | "revokeOperatorByPartition"
      | "setDocument"
      | "totalSupply"
      | "transfer"
      | "transferByPartition"
      | "transferFrom"
      | "transferFromWithData"
      | "transferWithData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperatorByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDocuments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDocument",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isControllable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorForPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "issueByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorRedeemByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorTransferByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "partitionsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDocument",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperatorByPartition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDocument",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferByPartition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromWithData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowanceByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIssuable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorForPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partitionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithData",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuthorizedOperator(address,address)": EventFragment;
    "AuthorizedOperatorByPartition(bytes32,address,address)": EventFragment;
    "ChangedPartition(bytes32,bytes32,uint256)": EventFragment;
    "DocumentRemoved(bytes32,string,bytes32)": EventFragment;
    "DocumentUpdated(bytes32,string,bytes32)": EventFragment;
    "Issued(address,address,uint256,bytes)": EventFragment;
    "IssuedByPartition(bytes32,address,address,uint256,bytes,bytes)": EventFragment;
    "Redeemed(address,address,uint256,bytes)": EventFragment;
    "RedeemedByPartition(bytes32,address,address,uint256,bytes)": EventFragment;
    "RevokedOperator(address,address)": EventFragment;
    "RevokedOperatorByPartition(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuthorizedOperatorByPartition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperatorByPartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferByPartition"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AuthorizedOperatorEventObject {
  operator: string;
  tokenHolder: string;
}
export type AuthorizedOperatorEvent = TypedEvent<
  [string, string],
  AuthorizedOperatorEventObject
>;

export type AuthorizedOperatorEventFilter =
  TypedEventFilter<AuthorizedOperatorEvent>;

export interface AuthorizedOperatorByPartitionEventObject {
  partition: string;
  operator: string;
  tokenHolder: string;
}
export type AuthorizedOperatorByPartitionEvent = TypedEvent<
  [string, string, string],
  AuthorizedOperatorByPartitionEventObject
>;

export type AuthorizedOperatorByPartitionEventFilter =
  TypedEventFilter<AuthorizedOperatorByPartitionEvent>;

export interface ChangedPartitionEventObject {
  fromPartition: string;
  toPartition: string;
  value: BigNumber;
}
export type ChangedPartitionEvent = TypedEvent<
  [string, string, BigNumber],
  ChangedPartitionEventObject
>;

export type ChangedPartitionEventFilter =
  TypedEventFilter<ChangedPartitionEvent>;

export interface DocumentRemovedEventObject {
  name: string;
  uri: string;
  documentHash: string;
}
export type DocumentRemovedEvent = TypedEvent<
  [string, string, string],
  DocumentRemovedEventObject
>;

export type DocumentRemovedEventFilter = TypedEventFilter<DocumentRemovedEvent>;

export interface DocumentUpdatedEventObject {
  name: string;
  uri: string;
  documentHash: string;
}
export type DocumentUpdatedEvent = TypedEvent<
  [string, string, string],
  DocumentUpdatedEventObject
>;

export type DocumentUpdatedEventFilter = TypedEventFilter<DocumentUpdatedEvent>;

export interface IssuedEventObject {
  operator: string;
  to: string;
  value: BigNumber;
  data: string;
}
export type IssuedEvent = TypedEvent<
  [string, string, BigNumber, string],
  IssuedEventObject
>;

export type IssuedEventFilter = TypedEventFilter<IssuedEvent>;

export interface IssuedByPartitionEventObject {
  partition: string;
  operator: string;
  to: string;
  value: BigNumber;
  data: string;
  operatorData: string;
}
export type IssuedByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, string, string],
  IssuedByPartitionEventObject
>;

export type IssuedByPartitionEventFilter =
  TypedEventFilter<IssuedByPartitionEvent>;

export interface RedeemedEventObject {
  operator: string;
  from: string;
  value: BigNumber;
  data: string;
}
export type RedeemedEvent = TypedEvent<
  [string, string, BigNumber, string],
  RedeemedEventObject
>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface RedeemedByPartitionEventObject {
  partition: string;
  operator: string;
  from: string;
  value: BigNumber;
  operatorData: string;
}
export type RedeemedByPartitionEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  RedeemedByPartitionEventObject
>;

export type RedeemedByPartitionEventFilter =
  TypedEventFilter<RedeemedByPartitionEvent>;

export interface RevokedOperatorEventObject {
  operator: string;
  tokenHolder: string;
}
export type RevokedOperatorEvent = TypedEvent<
  [string, string],
  RevokedOperatorEventObject
>;

export type RevokedOperatorEventFilter = TypedEventFilter<RevokedOperatorEvent>;

export interface RevokedOperatorByPartitionEventObject {
  partition: string;
  operator: string;
  tokenHolder: string;
}
export type RevokedOperatorByPartitionEvent = TypedEvent<
  [string, string, string],
  RevokedOperatorByPartitionEventObject
>;

export type RevokedOperatorByPartitionEventFilter =
  TypedEventFilter<RevokedOperatorByPartitionEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferByPartitionEventObject {
  fromPartition: string;
  operator: string;
  from: string;
  to: string;
  value: BigNumber;
  data: string;
  operatorData: string;
}
export type TransferByPartitionEvent = TypedEvent<
  [string, string, string, string, BigNumber, string, string],
  TransferByPartitionEventObject
>;

export type TransferByPartitionEventFilter =
  TypedEventFilter<TransferByPartitionEvent>;

export interface IERC1400 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1400Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowanceByPartition(
      partition: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizeOperatorByPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllDocuments(overrides?: CallOverrides): Promise<[string[]]>;

    getDocument(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    isControllable(overrides?: CallOverrides): Promise<[boolean]>;

    isIssuable(overrides?: CallOverrides): Promise<[boolean]>;

    isOperator(
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperatorForPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issue(
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    issueByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    operatorRedeemByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    operatorTransferByPartition(
      partition: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    partitionsOf(
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    redeem(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemByPartition(
      partition: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemFrom(
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeDocument(
      _name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeOperatorByPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDocument(
      _name: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _documentHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferByPartition(
      partition: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFromWithData(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferWithData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowanceByPartition(
    partition: PromiseOrValue<BytesLike>,
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizeOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizeOperatorByPartition(
    partition: PromiseOrValue<BytesLike>,
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfByPartition(
    partition: PromiseOrValue<BytesLike>,
    tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllDocuments(overrides?: CallOverrides): Promise<string[]>;

  getDocument(
    _name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  isControllable(overrides?: CallOverrides): Promise<boolean>;

  isIssuable(overrides?: CallOverrides): Promise<boolean>;

  isOperator(
    operator: PromiseOrValue<string>,
    tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperatorForPartition(
    partition: PromiseOrValue<BytesLike>,
    operator: PromiseOrValue<string>,
    tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issue(
    tokenHolder: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  issueByPartition(
    partition: PromiseOrValue<BytesLike>,
    tokenHolder: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  operatorRedeemByPartition(
    partition: PromiseOrValue<BytesLike>,
    tokenHolder: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  operatorTransferByPartition(
    partition: PromiseOrValue<BytesLike>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  partitionsOf(
    tokenHolder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  redeem(
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemByPartition(
    partition: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemFrom(
    tokenHolder: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeDocument(
    _name: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeOperatorByPartition(
    partition: PromiseOrValue<BytesLike>,
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDocument(
    _name: PromiseOrValue<BytesLike>,
    _uri: PromiseOrValue<string>,
    _documentHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferByPartition(
    partition: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFromWithData(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferWithData(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowanceByPartition(
      partition: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizeOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeOperatorByPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllDocuments(overrides?: CallOverrides): Promise<string[]>;

    getDocument(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    isControllable(overrides?: CallOverrides): Promise<boolean>;

    isIssuable(overrides?: CallOverrides): Promise<boolean>;

    isOperator(
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatorForPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issue(
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    issueByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorRedeemByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorTransferByPartition(
      partition: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    partitionsOf(
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    redeem(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemByPartition(
      partition: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFrom(
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDocument(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperatorByPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDocument(
      _name: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _documentHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferByPartition(
      partition: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFromWithData(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWithData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "AuthorizedOperator(address,address)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorEventFilter;
    AuthorizedOperator(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorEventFilter;

    "AuthorizedOperatorByPartition(bytes32,address,address)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorByPartitionEventFilter;
    AuthorizedOperatorByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): AuthorizedOperatorByPartitionEventFilter;

    "ChangedPartition(bytes32,bytes32,uint256)"(
      fromPartition?: PromiseOrValue<BytesLike> | null,
      toPartition?: PromiseOrValue<BytesLike> | null,
      value?: null
    ): ChangedPartitionEventFilter;
    ChangedPartition(
      fromPartition?: PromiseOrValue<BytesLike> | null,
      toPartition?: PromiseOrValue<BytesLike> | null,
      value?: null
    ): ChangedPartitionEventFilter;

    "DocumentRemoved(bytes32,string,bytes32)"(
      name?: PromiseOrValue<BytesLike> | null,
      uri?: null,
      documentHash?: null
    ): DocumentRemovedEventFilter;
    DocumentRemoved(
      name?: PromiseOrValue<BytesLike> | null,
      uri?: null,
      documentHash?: null
    ): DocumentRemovedEventFilter;

    "DocumentUpdated(bytes32,string,bytes32)"(
      name?: PromiseOrValue<BytesLike> | null,
      uri?: null,
      documentHash?: null
    ): DocumentUpdatedEventFilter;
    DocumentUpdated(
      name?: PromiseOrValue<BytesLike> | null,
      uri?: null,
      documentHash?: null
    ): DocumentUpdatedEventFilter;

    "Issued(address,address,uint256,bytes)"(
      operator?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): IssuedEventFilter;
    Issued(
      operator?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): IssuedEventFilter;

    "IssuedByPartition(bytes32,address,address,uint256,bytes,bytes)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): IssuedByPartitionEventFilter;
    IssuedByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): IssuedByPartitionEventFilter;

    "Redeemed(address,address,uint256,bytes)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): RedeemedEventFilter;
    Redeemed(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): RedeemedEventFilter;

    "RedeemedByPartition(bytes32,address,address,uint256,bytes)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      value?: null,
      operatorData?: null
    ): RedeemedByPartitionEventFilter;
    RedeemedByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      value?: null,
      operatorData?: null
    ): RedeemedByPartitionEventFilter;

    "RevokedOperator(address,address)"(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorEventFilter;
    RevokedOperator(
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorEventFilter;

    "RevokedOperatorByPartition(bytes32,address,address)"(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorByPartitionEventFilter;
    RevokedOperatorByPartition(
      partition?: PromiseOrValue<BytesLike> | null,
      operator?: PromiseOrValue<string> | null,
      tokenHolder?: PromiseOrValue<string> | null
    ): RevokedOperatorByPartitionEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)"(
      fromPartition?: PromiseOrValue<BytesLike> | null,
      operator?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): TransferByPartitionEventFilter;
    TransferByPartition(
      fromPartition?: PromiseOrValue<BytesLike> | null,
      operator?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): TransferByPartitionEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowanceByPartition(
      partition: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizeOperatorByPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllDocuments(overrides?: CallOverrides): Promise<BigNumber>;

    getDocument(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isControllable(overrides?: CallOverrides): Promise<BigNumber>;

    isIssuable(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatorForPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    issueByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    operatorRedeemByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    operatorTransferByPartition(
      partition: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    partitionsOf(
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemByPartition(
      partition: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemFrom(
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeDocument(
      _name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeOperatorByPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDocument(
      _name: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _documentHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferByPartition(
      partition: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFromWithData(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferWithData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowanceByPartition(
      partition: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizeOperatorByPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllDocuments(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDocument(
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isControllable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isIssuable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorForPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    issueByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    operatorRedeemByPartition(
      partition: PromiseOrValue<BytesLike>,
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    operatorTransferByPartition(
      partition: PromiseOrValue<BytesLike>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    partitionsOf(
      tokenHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemByPartition(
      partition: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemFrom(
      tokenHolder: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeDocument(
      _name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeOperatorByPartition(
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDocument(
      _name: PromiseOrValue<BytesLike>,
      _uri: PromiseOrValue<string>,
      _documentHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferByPartition(
      partition: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFromWithData(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferWithData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
