/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IERC1400TokensValidator {
  export type ValidateDataStruct = {
    token: PromiseOrValue<string>;
    payload: PromiseOrValue<BytesLike>;
    partition: PromiseOrValue<BytesLike>;
    operator: PromiseOrValue<string>;
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    operatorData: PromiseOrValue<BytesLike>;
  };

  export type ValidateDataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    string
  ] & {
    token: string;
    payload: string;
    partition: string;
    operator: string;
    from: string;
    to: string;
    value: BigNumber;
    data: string;
    operatorData: string;
  };
}

export interface IERC1400TokensValidatorInterface extends utils.Interface {
  functions: {
    "canValidate((address,bytes,bytes32,address,address,address,uint256,bytes,bytes))": FunctionFragment;
    "tokensToValidate(bytes,bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "canValidate" | "tokensToValidate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canValidate",
    values: [IERC1400TokensValidator.ValidateDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToValidate",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "canValidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToValidate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IERC1400TokensValidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1400TokensValidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canValidate(
      data: IERC1400TokensValidator.ValidateDataStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokensToValidate(
      payload: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canValidate(
    data: IERC1400TokensValidator.ValidateDataStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensToValidate(
    payload: PromiseOrValue<BytesLike>,
    partition: PromiseOrValue<BytesLike>,
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canValidate(
      data: IERC1400TokensValidator.ValidateDataStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensToValidate(
      payload: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    canValidate(
      data: IERC1400TokensValidator.ValidateDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensToValidate(
      payload: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canValidate(
      data: IERC1400TokensValidator.ValidateDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensToValidate(
      payload: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
